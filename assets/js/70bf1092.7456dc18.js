"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[83812],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>y});var i=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),g=a,y=c["".concat(l,".").concat(g)]||c[g]||u[g]||r;return n?i.createElement(y,o(o({ref:t},d),{},{components:n})):i.createElement(y,o({ref:t},d))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},61184:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=n(58168),a=(n(96540),n(15680));const r={id:"testing-http-apps",title:"Testing HTTP Applications"},o=void 0,s={unversionedId:"zio-http/tutorials/testing-http-apps",id:"zio-http/tutorials/testing-http-apps",title:"Testing HTTP Applications",description:"Testing HTTP applications is a critical part of the development process. Utilizing the ZIO Test we can write first-class tests for our HTTP applications.",source:"@site/docs/zio-http/tutorials/testing-http-apps.md",sourceDirName:"zio-http/tutorials",slug:"/zio-http/tutorials/testing-http-apps",permalink:"/zio-http/tutorials/testing-http-apps",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-http/tutorials/testing-http-apps.md",tags:[],version:"current",frontMatter:{id:"testing-http-apps",title:"Testing HTTP Applications"},sidebar:"ecosystem-sidebar",previous:{title:"FAQ",permalink:"/zio-http/faq"},next:{title:"Examples",permalink:"/zio-http/examples/"}},l={},p=[{value:"ZIO Test",id:"zio-test",level:2},{value:"ZIO HTTP Testkit",id:"zio-http-testkit",level:2},{value:"TestClinet",id:"testclinet",level:2},{value:"TestServer",id:"testserver",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.yg)(c,(0,i.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Testing HTTP applications is a critical part of the development process. Utilizing the ZIO Test we can write first-class tests for our HTTP applications."),(0,a.yg)("h2",{id:"zio-test"},"ZIO Test"),(0,a.yg)("p",null,"We have comprehensive documentation on ",(0,a.yg)("a",{parentName:"p",href:"https://zio.dev/reference/test/"},"ZIO Test")," which is worth reading to understand how to write tests using ZIO effects."),(0,a.yg)("p",null,"It is easy to test ZIO HTTP applications beacuse we can think of ",(0,a.yg)("inlineCode",{parentName:"p"},"HttpApp")," as a function of ",(0,a.yg)("inlineCode",{parentName:"p"},"Request => ZIO[R, Response, Response]"),". This means we can effortlessly provide a Request as input to the ",(0,a.yg)("inlineCode",{parentName:"p"},"HttpApp")," and receive the corresponding Response as output using the runZIO method. By doing this we can test the behavior of the ",(0,a.yg)("inlineCode",{parentName:"p"},"HttpApp")," in a controlled environment:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.test._\nimport zio.test.Assertion.equalTo\nimport zio.http._\n\nobject ExampleSpec extends ZIOSpecDefault {\n\n  def spec = suite("http")(\n    test("should be ok") {\n      val app = Handler.ok.toHttpApp\n      val req = Request.get(URL(Path.root))\n      assertZIO(app.runZIO(req))(equalTo(Response.ok))\n    }\n  )\n}\n')),(0,a.yg)("h2",{id:"zio-http-testkit"},"ZIO HTTP Testkit"),(0,a.yg)("p",null,"Also, ZIO HTTP provides a testkit called ",(0,a.yg)("inlineCode",{parentName:"p"},"zio-http-testkit")," that includes ",(0,a.yg)("inlineCode",{parentName:"p"},"TestClient")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"TestServer")," utilities which helps us to test our HTTP applications without the need for having a real live client and server instances."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-test"         % "2.1.1"  % Test\nlibraryDependencies += "dev.zio" %% "zio-test-sbt"     % "2.1.1"  % Test\nlibraryDependencies += "dev.zio" %% "zio-http-testkit" % "3.0.0-RC8" % Test\ntestFrameworks += new TestFramework("zio.test.sbt.ZTestFramework")\n')),(0,a.yg)("p",null,"Now, based on the requirement we can use any of the following test utilities:"),(0,a.yg)("h2",{id:"testclinet"},"TestClinet"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"TestClient")),(0,a.yg)("p",null,"Using the ",(0,a.yg)("inlineCode",{parentName:"p"},"TestClient")," we can write tests for our HTTP applications without starting a live server instance."),(0,a.yg)("p",null,"Using following methods we can define the behavior of the ",(0,a.yg)("inlineCode",{parentName:"p"},"TestClient"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"TestClient.addRequestResponse")," - Adds an exact 1-1 behavior. It takes a request and a response and returns a ",(0,a.yg)("inlineCode",{parentName:"li"},"ZIO[TestClient, Nothing, Unit]"),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"TestClient.addRoute")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"addRouts")," - Adds a route definition to handle requests that are submitted by test cases. It takes a ",(0,a.yg)("inlineCode",{parentName:"li"},"Route")," or ",(0,a.yg)("inlineCode",{parentName:"li"},"Routes")," and returns a ",(0,a.yg)("inlineCode",{parentName:"li"},"ZIO[R with TestClient, Nothing, Unit]"),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"TestClient.installSocketApp")," - Installs a ",(0,a.yg)("inlineCode",{parentName:"li"},"WebSocketApp")," to the ",(0,a.yg)("inlineCode",{parentName:"li"},"TestClient"),".")),(0,a.yg)("p",null,"After defining the behavior of the test client, we can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"TestClient.layer")," to provide the ",(0,a.yg)("inlineCode",{parentName:"p"},"TestClient")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"Client")," to the test cases:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\nimport zio.test.{test, _}\n\nobject TestUsingTestClient extends ZIOSpecDefault {\n  def spec = \n    test("hello world route and fallback") {\n      for {\n        client           <- ZIO.service[Client]\n        _                <- TestClient.addRoutes {\n          Routes(\n            Method.GET / trailing          -> handler { Response.text("fallback") },\n            Method.GET / "hello" / "world" -> handler { Response.text("Hey there!") },\n          )\n        }\n        helloResponse    <- client(Request.get(URL.root / "hello" / "world"))\n        helloBody        <- helloResponse.body.asString\n        fallbackResponse <- client(Request.get(URL.root / "any"))\n        fallbackBody     <- fallbackResponse.body.asString\n      } yield assertTrue(helloBody == "Hey there!", fallbackBody == "fallback")\n    }.provide(TestClient.layer, Scope.default)\n}\n')),(0,a.yg)("h2",{id:"testserver"},"TestServer"),(0,a.yg)("p",null,"Using the ",(0,a.yg)("inlineCode",{parentName:"p"},"TestServer")," we can write tests for our HTTP applications by starting a live server instance on the localhost."),(0,a.yg)("p",null,"Using the following methods we can define the behavior of the ",(0,a.yg)("inlineCode",{parentName:"p"},"TestServer"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"TestServer.addRequestResponse")," - Adds an exact 1-1 behavior. It takes a request and a response and returns a ",(0,a.yg)("inlineCode",{parentName:"li"},"ZIO[TestServer, Nothing, Unit]"),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"TestServer.addRoute")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"TestServer.addRouts")," - Adds a route definition to handle requests that are submitted by test cases. It takes a ",(0,a.yg)("inlineCode",{parentName:"li"},"Route")," or ",(0,a.yg)("inlineCode",{parentName:"li"},"Routes")," and returns a ",(0,a.yg)("inlineCode",{parentName:"li"},"ZIO[R with TestServer, Nothing, Unit]"),"."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"TestServer.install")," - Installs a ",(0,a.yg)("inlineCode",{parentName:"li"},"HttpApp")," to the ",(0,a.yg)("inlineCode",{parentName:"li"},"TestServer"),".")),(0,a.yg)("p",null,"After defining the behavior of the test server, we can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"TestServer.layer")," to provide the ",(0,a.yg)("inlineCode",{parentName:"p"},"TestServer")," to any test cases that require ",(0,a.yg)("inlineCode",{parentName:"p"},"Server"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.http._\nimport zio.http.netty.NettyConfig\nimport zio.http.netty.server.NettyDriver\nimport zio.test._\n\nobject TestServerExampleSpec extends ZIOSpecDefault {\n\n  def spec = suite("test http app") {\n    test("test hello and fallback routes") {\n      for {\n        client <- ZIO.service[Client]\n        port   <- ZIO.serviceWith[Server](_.port)\n        testRequest = Request\n          .get(url = URL.root.port(port))\n          .addHeaders(Headers(Header.Accept(MediaType.text.`plain`)))\n        _                <- TestServer.addRoutes {\n          Routes(\n            Method.GET / trailing          -> handler {\n              Response.text("fallback")\n            },\n            Method.GET / "hello" / "world" -> handler {\n              Response.text("Hey there!")\n            },\n          )\n        }\n        helloResponse    <- client(Request.get(testRequest.url / "hello" / "world"))\n        helloBody        <- helloResponse.body.asString\n        fallbackResponse <- client(Request.get(testRequest.url / "any"))\n        fallbackBody     <- fallbackResponse.body.asString\n      } yield assertTrue(helloBody == "Hey there!", fallbackBody == "fallback")\n    }.provideSome[Client with Driver](TestServer.layer, Scope.default)\n  }.provide(\n    ZLayer.succeed(Server.Config.default.onAnyOpenPort),\n    Client.default,\n    NettyDriver.customized,\n    ZLayer.succeed(NettyConfig.defaultWithFastShutdown),\n  )\n}\n')))}u.isMDXComponent=!0}}]);