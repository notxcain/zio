"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[90838],{15680:(e,n,a)=>{a.d(n,{xA:()=>p,yg:()=>m});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=t.createContext({}),l=function(e){var n=t.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},p=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(a),g=r,m=u["".concat(c,".").concat(g)]||u[g]||d[g]||o;return a?t.createElement(m,i(i({ref:n},p),{},{components:a})):t.createElement(m,i({ref:n},p))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=g;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=a[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},67631:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var t=a(58168),r=(a(96540),a(15680));const o={id:"encoding",title:"Encoding"},i=void 0,s={unversionedId:"zio-json/encoding",id:"zio-json/encoding",title:"Encoding",description:"Automatic Derivation",source:"@site/docs/zio-json/encoding.md",sourceDirName:"zio-json",slug:"/zio-json/encoding",permalink:"/zio-json/encoding",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/zio-json/encoding.md",tags:[],version:"current",frontMatter:{id:"encoding",title:"Encoding"},sidebar:"ecosystem-sidebar",previous:{title:"Decoding",permalink:"/zio-json/decoding"},next:{title:"Configuration",permalink:"/zio-json/configuration"}},c={},l=[{value:"Automatic Derivation",id:"automatic-derivation",level:2},{value:"ADTs",id:"adts",level:3},{value:"Manual instances",id:"manual-instances",level:2},{value:"<code>.contramap</code>",id:"contramap",level:3}],p={toc:l},u="wrapper";function d(e){let{components:n,...a}=e;return(0,r.yg)(u,(0,t.A)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"automatic-derivation"},"Automatic Derivation"),(0,r.yg)("p",null,"Assume we want to encode this case class"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"case class Banana(curvature: Double)\n")),(0,r.yg)("p",null,"To produce JSON from our data we define a ",(0,r.yg)("inlineCode",{parentName:"p"},"JsonEncoder")," like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio.json._\n\nobject Banana {\n  implicit val encoder: JsonEncoder[Banana] =\n    DeriveJsonEncoder.gen[Banana]\n}\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'Banana(0.5).toJson\n// res0: String = "{\\"curvature\\":0.5}"\n')),(0,r.yg)("h3",{id:"adts"},"ADTs"),(0,r.yg)("p",null,"Say we extend our data model to include more data types"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"sealed trait Fruit\n\ncase class Banana(curvature: Double) extends Fruit\ncase class Apple (poison: Boolean)   extends Fruit\n")),(0,r.yg)("p",null,"we can generate the encoder for the entire ",(0,r.yg)("inlineCode",{parentName:"p"},"sealed")," family"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"import zio.json._\n\nobject Fruit {\n  implicit val encoder: JsonEncoder[Fruit] =\n    DeriveJsonEncoder.gen[Fruit]\n}\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'val apple: Fruit = Apple(poison = false)\n// apple: Fruit = Apple(poison = false)\napple.toJson\n// res2: String = "{\\"Apple\\":{\\"poison\\":false}}"\n')),(0,r.yg)("p",null,"Almost all of the standard library data types are supported as fields on the case class, and it is easy to add support if one is missing."),(0,r.yg)("h2",{id:"manual-instances"},"Manual instances"),(0,r.yg)("p",null,"Sometimes it is easier to reuse an existing ",(0,r.yg)("inlineCode",{parentName:"p"},"JsonEncoder")," rather than generate a new one. This can be accomplished using convenience methods on the ",(0,r.yg)("inlineCode",{parentName:"p"},"JsonEncoder")," typeclass to ",(0,r.yg)("em",{parentName:"p"},"derive")," new decoders:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"trait JsonEncoder[A] {\n  def contramap[B](f: B => A): JsonEncoder[B]\n  ...\n}\n")),(0,r.yg)("h3",{id:"contramap"},(0,r.yg)("inlineCode",{parentName:"h3"},".contramap")),(0,r.yg)("p",null,"We can use ",(0,r.yg)("inlineCode",{parentName:"p"},"contramap")," from an already existing encoder:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'import zio.json._\n\ncase class FruitCount(value: Int)\n\nobject FruitCount {\n  implicit val encoder: JsonEncoder[FruitCount] =\n    JsonEncoder[Int].contramap(_.value)\n}\n\nFruitCount(3).toJson\n// res3: String = "3"\n')))}d.isMDXComponent=!0}}]);