"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[62211],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var r=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),g=i,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||a;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},52946:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=t(58168),i=(t(96540),t(15680));const a={id:"hello-world",title:"ZIO Quickstart: Hello World",sidebar_label:"Hello World"},o=void 0,l={unversionedId:"guides/quickstarts/hello-world",id:"guides/quickstarts/hello-world",title:"ZIO Quickstart: Hello World",description:"This is the simplest quickstart for a ZIO application. You can download and run it very quickly. This will give you an idea of how to write similar apps.",source:"@site/docs/guides/quickstarts/hello-world.md",sourceDirName:"guides/quickstarts",slug:"/guides/quickstarts/hello-world",permalink:"/guides/quickstarts/hello-world",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/guides/quickstarts/hello-world.md",tags:[],version:"current",frontMatter:{id:"hello-world",title:"ZIO Quickstart: Hello World",sidebar_label:"Hello World"},sidebar:"guides-sidebar",previous:{title:"Overview",permalink:"/guides/"},next:{title:"RESTful Web Service",permalink:"/guides/quickstarts/restful-webservice"}},s={},p=[{value:"Running The Example",id:"running-the-example",level:2},{value:"Testing The Quickstart",id:"testing-the-quickstart",level:2}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,i.yg)(u,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"This is the simplest quickstart for a ZIO application. You can download and run it very quickly. This will give you an idea of how to write similar apps."),(0,i.yg)("h2",{id:"running-the-example"},"Running The Example"),(0,i.yg)("p",null,"First, open the console and clone the ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/zio/zio-quickstarts"},"ZIO Quickstarts")," project using ",(0,i.yg)("inlineCode",{parentName:"p"},"git")," (or you can simply download the project) and then change the directory:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"$ git clone https://github.com/zio/zio-quickstarts.git\n$ cd zio-quickstarts/zio-quickstart-hello-world\n")),(0,i.yg)("p",null,"Once you are inside the project directory, run the application:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-bash"},"sbt run\n")),(0,i.yg)("h2",{id:"testing-the-quickstart"},"Testing The Quickstart"),(0,i.yg)("p",null,"When we prompt the ",(0,i.yg)("inlineCode",{parentName:"p"},"sbt run")," the sbt search for the executable class and will find the ",(0,i.yg)("inlineCode",{parentName:"p"},"zio.dev.quickstart.MainApp")," which contains the following code:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  def run = Console.printLine("Hello, World!")\n}\n')),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"MainApp")," is the main object of our application which extends the ",(0,i.yg)("inlineCode",{parentName:"p"},"ZIOAppDefault")," trait. This trait provides the ",(0,i.yg)("inlineCode",{parentName:"p"},"main")," function which can be invoked from IDEs or the command-line, e.g. the ",(0,i.yg)("inlineCode",{parentName:"p"},"sbt run"),"."),(0,i.yg)("p",null,"This example is the simplest, example we can run. Let's change it so that we ask the name of the user and print a hello along with the user's name:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  def run =\n    for {\n      _    <- Console.print("Please enter your name: ")\n      name <- Console.readLine\n      _    <- Console.printLine(s"Hello, $name!")\n    } yield ()\n}\n')),(0,i.yg)("p",null,"In this example, we used ",(0,i.yg)("inlineCode",{parentName:"p"},"for-comprehension")," to compose ",(0,i.yg)("inlineCode",{parentName:"p"},"print"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"readLine")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"printLine")," workflows. We can think of it as the following ",(0,i.yg)("inlineCode",{parentName:"p"},"flatMap")," operations:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  def run =\n    Console.print("Please enter your name: ")\n      .flatMap { _ =>\n        Console.readLine\n          .flatMap { name =>\n            Console.printLine(s"Hello, $name!")\n          }\n      }\n}\n')))}d.isMDXComponent=!0}}]);